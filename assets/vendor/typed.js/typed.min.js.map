{"version":3,
    "sources":[
        "typed.js"
    ],
    "names":[
        "root",
        "factory",
        "exports",
        "module",
        "define",
        "amd",
        "this",
        "modules",
        "__webpack_require__",
        "moduleId",
        "installedModules",
        "id",
        "loaded",
        "call",
        "m",
        "c",
        "p",
        "_classCallCheck",
        "instance",
        "Constructor",
        "TypeError",
        "Object",
        "defineProperty",
        "value",
        "_createClass",
        "defineProperties",
        "target",
        "props",
        "i",
        "length",
        "descriptor",
        "enumerable",
        "configurable",
        "writable",
        "key",
        "protoProps",
        "staticProps",
        "prototype",
        "_initializerJs",
        "_htmlParserJs",
        "Typed",
        "elementId",
        "options",
        "initializer",
        "load",
        "begin",
        "pause",
        "status",
        "start",
        "stop",
        "typingComplete",
        "toggleBlinking",
        "onStop",
        "arrayPos",
        "typewrite",
        "curString",
        "curStrPos",
        "backspace",
        "onStart",
        "reset",
        "onDestroy",
        "restart",
        "arguments",
        "undefined",
        "clearInterval",
        "timeout",
        "replaceText",
        "cursor",
        "parentNode",
        "removeChild",
        "strPos",
        "curLoop",
        "insertCursor",
        "onReset",
        "_this",
        "onBegin",
        "shuffleStringsIfNeeded",
        "bindInputFocusEvents",
        "bindFocusEvents",
        "setTimeout",
        "currentElContent",
        "strings",
        "sequence",
        "startDelay",
        "_this2",
        "fadeOut",
        "el",
        "classList",
        "contains",
        "fadeOutClass",
        "remove",
        "humanize",
        "humanizer",
        "typeSpeed",
        "numChars",
        "setPauseStatus",
        "htmlParser",
        "typeHtmlChars",
        "pauseTime",
        "substr",
        "charAt",
        "test",
        "skip",
        "exec",
        "parseInt",
        "temporaryPause",
        "onTypingPaused",
        "substring",
        "stringBeforeSkip",
        "stringSkipped",
        "stringAfterSkip",
        "doneTyping",
        "keepTyping",
        "onTypingResumed",
        "preStringTyped",
        "nextString",
        "_this3",
        "onStringTyped",
        "complete",
        "loop",
        "loopCount",
        "backDelay",
        "_this4",
        "initFadeOut",
        "backSpeed",
        "backSpaceHtmlChars",
        "curStringAtPosition",
        "smartBackspace",
        "stopNum",
        "onLastStringBackspaced",
        "onComplete",
        "isTyping",
        "isBlinking",
        "cursorBlinking",
        "add",
        "speed",
        "Math",
        "round",
        "random",
        "shuffle",
        "sort",
        "_this5",
        "className",
        "fadeOutDelay",
        "str",
        "attr",
        "setAttribute",
        "isInput",
        "contentType",
        "innerHTML",
        "textContent",
        "_this6",
        "addEventListener",
        "e",
        "showCursor",
        "document",
        "createElement",
        "cursorChar",
        "insertBefore",
        "nextSibling",
        "_interopRequireDefault",
        "obj",
        "__esModule",
        "default",
        "_extends",
        "assign",
        "source",
        "hasOwnProperty",
        "_defaultsJs",
        "_defaultsJs2",
        "Initializer",
        "self",
        "querySelector",
        "tagName",
        "toLowerCase",
        "elContent",
        "getAttribute",
        "isPaused",
        "map",
        "s",
        "trim",
        "stringsElement",
        "style",
        "display",
        "Array",
        "slice",
        "apply",
        "children",
        "stringsLength",
        "stringEl",
        "push",
        "getCurrentElContent",
        "autoInsertCss",
        "appendAnimationCss",
        "cssDataName",
        "css",
        "type",
        "innerCss",
        "body",
        "appendChild",
        "defaults",
        "Infinity",
        "HTMLParser",
        "curChar",
        "endTag"
    ],
    "mappings":
        "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",
    "file":"typed.min.js",
    "sourcesContent":[
            "(function webpackUniversalModuleDefinition(root, factory) {
                if (typeof exports === 'object' && typeof module === 'object'){
                    tmodule.exports = factory();
                } else if(typeof define === 'function' && define.amd){
                    tdefine([], factory);
                } else if(typeof exports === 'object'){
                    exports[\"Typed\"] = factory();
                } else root[\"Typed\"] = factory();
            })"
            (this, function() {
                return (function(modules) { 
                    // webpackBootstrap
                    // The module cache
                    var installedModules = {};
                    function __webpack_require__(moduleId) {
                        // Check if module is in cache
                        if(installedModules[moduleId]){
                            return installedModules[moduleId].exports;
                        }
                        // Create a new module (and put it into the cache)
                        var module = installedModules[moduleId] = {
                            exports: {},
                            id: moduleId,
                            loaded: false
                        };
                            // Execute the module function
                        modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
                            // Flag the module as loaded
                        module.loaded = true;
                            // Return the exports of the module
                        return module.exports;
                    }
                            // expose the modules object (__webpack_modules__)
                         __webpack_require__.m = modules;
                            // expose the module cache
                        __webpack_require__.c = installedModules;
                            // __webpack_public_path__
                        __webpack_require__.p = "";
                            // Load entry module and return exports
                        return __webpack_require__(0);
                })
                ([/* 0 */
                (function(module, exports, __webpack_require__) {
                    'use strict';
                    Object.defineProperty(exports, '__esModule', {
                        value: true
                    });
                    var _createClass = (function () { 
                        function defineProperties(target, props) { 
                            for (var i = 0; i < props.length; i++) { 
                                var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; 
                                descriptor.configurable = true; 
                                    if ('value' in descriptor) descriptor.writable = true; 
                                    Object.defineProperty(target, descriptor.key, descriptor); 
                            } 
                        } return function (Constructor, protoProps, staticProps) { 
                            if (protoProps) defineProperties(Constructor.prototype, protoProps); 
                            if (staticProps) defineProperties(Constructor, staticProps); 
                            return Constructor; 
                            }; 
                    })
                    ();
                function _classCallCheck(instance, Constructor) { 
                    if (!(instance instanceof Constructor)) { 
                        throw new TypeError('Cannot call a class as a function'); 
                    } 
                }            
                var _initializerJs = __webpack_require__(1);
                var _htmlParserJs = __webpack_require__(3);            
/**
* Welcome to Typed.js!
* @param {string} elementId HTML element ID _OR_ HTML element
* @param {object} options options object
* @returns {object} a new Typed object
*/
                var Typed = (function () {
                    function Typed(elementId, options) {
                        _classCallCheck(this, Typed);
                        // Initialize it up
                        _initializerJs.initializer.load(this, options, elementId);        
                        // All systems go!
                        this.begin();
                    }
                            
                                  
                            
/**
* Toggle start() and stop() of the Typed instance
* @public
*/
                _createClass(Typed, [
                    {
                    key: 'toggle',
                        value: function toggle() {
                            this.pause.status ? this.start() : this.stop();
                        }                                
/**
* Stop typing / backspacing and enable cursor blinking
* @public
*/
                    }, 
                    {
                    key: 'stop',
                    value: function stop() {    
                        if (this.typingComplete) return;
                        if (this.pause.status) return;
                        this.toggleBlinking(true);
                        this.pause.status = true;
                        this.options.onStop(this.arrayPos, this);
                    }
/**                    
* Start typing / backspacing after being stopped
* @public
*/
                    }, 
                    {
                    key: 'start',
                    value: function start() {
                        if (this.typingComplete) return;
                        if (!this.pause.status) return;
                        this.pause.status = false;
                        if (this.pause.typewrite) {
                            this.typewrite(this.pause.curString, 
                            this.pause.curStrPos);
                        } else {
                            this.backspace(
                                this.pause.curString, 
                                this.pause.curStrPos);
                        }
                                
                                      this.options.onStart(this.arrayPos, this);
                                
                                    }
                                
                                    
                                
                                    /**
                                
                                    * Destroy this instance of Typed
                                
                                     * @public
                                
                                     */
                                
                                     }, {
                                
                                    key: 'destroy',
                                
                                    value: function destroy() {
                                
                                        this.reset(false);
                                
                                      this.options.onDestroy(this);
                                
                                    }
                                
                                    
                                
                                    /**
                                
                                    * Reset Typed and optionally restarts
                                
                                     * @param {boolean} restart
                                
                                     * @public
                                
                                     */
                                
                                     }, {
                                
                                    key: 'reset',
                                
                                    value: function reset() {
                                
                                        var restart = arguments.length <= 0 || arguments[0] === undefined ? true : arguments[0];
                                
                                      
                                
                                      clearInterval(this.timeout);
                                
                                      this.replaceText('');
                                
                                      if (this.cursor && this.cursor.parentNode) {
                                
                                        this.cursor.parentNode.removeChild(this.cursor);
                                
                                        this.cursor = null;
                                
                                    }
                            
                                      this.strPos = 0;
                            
                                  this.arrayPos = 0;
                            
                                  this.curLoop = 0;
                            
                                  if (restart) {
                                
                                    this.insertCursor();
                                
                                        this.options.onReset(this);
                                
                                        this.begin();
                                
                                    }
                            
                                    }
                            
                                
                            
                                /**
                            
                                * Begins the typing animation
                            
                                 * @private
                            
                                 */
                            
                                 }, {
                                
                                key: 'begin',
                                
                                    value: function begin() {
                                
                                        var _this = this;
                                
                                      
                                
                                      this.options.onBegin(this);
                                
                                      this.typingComplete = false;
                                
                                      this.shuffleStringsIfNeeded(this);
                                
                                      this.insertCursor();
                                
                                      if (this.bindInputFocusEvents) this.bindFocusEvents();
                                
                                      this.timeout = setTimeout(function () {
                                
                                        // Check if there is some text in the element, if yes start by backspacing the default message
                                
                                        if (!_this.currentElContent || _this.currentElContent.length === 0) {
                                
                                            _this.typewrite(_this.strings[_this.sequence[_this.arrayPos]], _this.strPos);
                                
                                          } else {
                                
                                            // Start typing
                                
                                          _this.backspace(_this.currentElContent, _this.currentElContent.length);
                                
                                        }
                            
                                        }, this.startDelay);
                            
                                }
                            
                                
                            
                                /**
                            
                                * Called for each character typed
                            
                                 * @param {string} curString the current string in the strings array
                            
                                 * @param {number} curStrPos the current position in the curString
                            
                                 * @private
                            
                                 */
                            
                                 }, {
                                
                                key: 'typewrite',
                                
                                    value: function typewrite(curString, curStrPos) {
                                
                                        var _this2 = this;
                                
                                      
                                
                                      if (this.fadeOut && this.el.classList.contains(this.fadeOutClass)) {
                                
                                        this.el.classList.remove(this.fadeOutClass);
                                
                                        if (this.cursor) this.cursor.classList.remove(this.fadeOutClass);
                                
                                    }
                            
                                      
                            
                                      var humanize = this.humanizer(this.typeSpeed);
                            
                                  var numChars = 1;
                            
                                  
                            
                                  if (this.pause.status === true) {
                                
                                    this.setPauseStatus(curString, curStrPos, true);
                                
                                        return;
                                
                                    }
                            
                                      
                            
                                      // contain typing function in a timeout humanize'd delay
                            
                                  this.timeout = setTimeout(function () {
                                
                                    // skip over any HTML chars
                                
                                        curStrPos = _htmlParserJs.htmlParser.typeHtmlChars(curString, curStrPos, _this2);
                                
                                        
                                
                                        var pauseTime = 0;
                                
                                        var substr = curString.substr(curStrPos);
                                
                                        // check for an escape character before a pause value
                                
                                        // format: \\^\\d+ .. eg: ^1000 .. should be able to print the ^ too using ^^
                                
                                        // single ^ are removed from string
                                
                                        if (substr.charAt(0) === '^') {
                                
                                            if (/^\\^\\d+/.test(substr)) {
                                
                                            var skip = 1; // skip at least 1
                                
                                            substr = /\\d+/.exec(substr)[0];
                                
                                            skip += substr.length;
                                
                                            pauseTime = parseInt(substr);
                                
                                            _this2.temporaryPause = true;
                                
                                            _this2.options.onTypingPaused(_this2.arrayPos, _this2);
                                
                                            // strip out the escape character and pause value so they're not printed
                                
                                            curString = curString.substring(0, curStrPos) + curString.substring(curStrPos + skip);
                                
                                            _this2.toggleBlinking(true);
                                
                                        }
                            
                                        }
                            
                                    
                            
                                    // check for skip characters formatted as
                            
                                    // \"this is a `string to print NOW` ...\"
                                
                                    if (substr.charAt(0) === '`') {
                                
                                            while (curString.substr(curStrPos + numChars).charAt(0) !== '`') {
                                
                                            numChars++;
                                
                                            if (curStrPos + numChars > curString.length) break;
                                
                                        }
                                
                                          // strip out the escape characters and append all the string in between
                                
                                          var stringBeforeSkip = curString.substring(0, curStrPos);
                                
                                          var stringSkipped = curString.substring(stringBeforeSkip.length + 1, curStrPos + numChars);
                                
                                          var stringAfterSkip = curString.substring(curStrPos + numChars + 1);
                                
                                          curString = stringBeforeSkip + stringSkipped + stringAfterSkip;
                                
                                          numChars--;
                                
                                        }
                                
                                        
                                
                                        // timeout for any pause after a character
                                
                                        _this2.timeout = setTimeout(function () {
                                
                                            // Accounts for blinking while paused
                                
                                          _this2.toggleBlinking(false);
                                
                                          
                                
                                          // We're done with this sentence!
                                
                                          if (curStrPos >= curString.length) {
                                
                                            _this2.doneTyping(curString, curStrPos);
                                
                                            } else {
                                
                                            _this2.keepTyping(curString, curStrPos, numChars);
                                
                                        }
                                
                                          // end of character pause
                                
                                          if (_this2.temporaryPause) {
                                
                                            _this2.temporaryPause = false;
                                
                                            _this2.options.onTypingResumed(_this2.arrayPos, _this2);
                                
                                        }
                                
                                          }, pauseTime);
                                
                                        
                                
                                        // humanized value for typing
                                
                                        }, humanize);
                                
                                    }
                                
                                    
                                
                                    /**
                                
                                    * Continue to the next string & begin typing
                                
                                     * @param {string} curString the current string in the strings array
                                
                                     * @param {number} curStrPos the current position in the curString
                                
                                     * @private
                                
                                     */
                                
                                     }, {
                                
                                    key: 'keepTyping',
                                
                                    value: function keepTyping(curString, curStrPos, numChars) {
                                
                                        // call before functions if applicable
                                
                                      if (curStrPos === 0) {
                                
                                        this.toggleBlinking(false);
                                
                                        this.options.preStringTyped(this.arrayPos, this);
                                
                                    }
                                
                                      // start typing each new char into existing string
                                
                                      // curString: arg, this.el.html: original text inside element
                                
                                      curStrPos += numChars;
                                
                                      var nextString = curString.substr(0, curStrPos);
                                
                                      this.replaceText(nextString);
                                
                                      // loop the function
                                
                                      this.typewrite(curString, curStrPos);
                                
                                    }
                                
                                    
                                
                                    /**
                                
                                    * We're done typing the current string
                                
                                     * @param {string} curString the current string in the strings array
                                
                                     * @param {number} curStrPos the current position in the curString
                                
                                     * @private
                                
                                     */
                                
                                     }, {
                                
                                    key: 'doneTyping',
                                
                                    value: function doneTyping(curString, curStrPos) {
                                
                                        var _this3 = this;
                                
                                      
                                
                                      // fires callback function
                                
                                      this.options.onStringTyped(this.arrayPos, this);
                                
                                      this.toggleBlinking(true);
                                
                                      // is this the final string
                                
                                      if (this.arrayPos === this.strings.length - 1) {
                                
                                        // callback that occurs on the last typed string
                                
                                        this.complete();
                                
                                        // quit if we wont loop back
                                
                                        if (this.loop === false || this.curLoop === this.loopCount) {
                                
                                            return;
                                
                                        }
                                
                                    }
                                
                                      this.timeout = setTimeout(function () {
                                
                                        _this3.backspace(curString, curStrPos);
                                
                                        }, this.backDelay);
                                
                                    }
                                
                                    
                                
                                    /**
                                
                                    * Backspaces 1 character at a time
                                
                                     * @param {string} curString the current string in the strings array
                                
                                     * @param {number} curStrPos the current position in the curString
                                
                                     * @private
                                
                                     */
                                
                                     }, {
                                
                                    key: 'backspace',
                                
                                    value: function backspace(curString, curStrPos) {
                                
                                        var _this4 = this;
                                
                                      
                                
                                      if (this.pause.status === true) {
                                
                                        this.setPauseStatus(curString, curStrPos, false);
                                
                                        return;
                                
                                    }
                                
                                      if (this.fadeOut) return this.initFadeOut();
                                
                                      
                                
                                      this.toggleBlinking(false);
                                
                                      var humanize = this.humanizer(this.backSpeed);
                                
                                      
                                
                                      this.timeout = setTimeout(function () {
                                
                                        curStrPos = _htmlParserJs.htmlParser.backSpaceHtmlChars(curString, curStrPos, _this4);
                                
                                        // replace text with base text + typed characters
                                
                                        var curStringAtPosition = curString.substr(0, curStrPos);
                                
                                        _this4.replaceText(curStringAtPosition);
                                
                                        
                                
                                        // if smartBack is enabled
                                
                                        if (_this4.smartBackspace) {
                                
                                            // the remaining part of the current string is equal of the same part of the new string
                                
                                          var nextString = _this4.strings[_this4.arrayPos + 1];
                                
                                          if (nextString && curStringAtPosition === nextString.substr(0, curStrPos)) {
                                
                                            _this4.stopNum = curStrPos;
                                
                                            } else {
                                
                                            _this4.stopNum = 0;
                                
                                        }
                            
                                        }
                            
                                    
                            
                                    // if the number (id of character in current string) is
                            
                                    // less than the stop number, keep going
                            
                                    if (curStrPos > _this4.stopNum) {
                                
                                        // subtract characters one by one
                                
                                          curStrPos--;
                                
                                          // loop the function
                                
                                          _this4.backspace(curString, curStrPos);
                                
                                          } else if (curStrPos <= _this4.stopNum) {
                                
                                            // if the stop number has been reached, increase
                                
                                          // array position to next string
                                
                                          _this4.arrayPos++;
                                
                                          // When looping, begin at the beginning after backspace complete
                                
                                          if (_this4.arrayPos === _this4.strings.length) {
                                
                                            _this4.arrayPos = 0;
                                
                                            _this4.options.onLastStringBackspaced();
                                
                                            _this4.shuffleStringsIfNeeded();
                                
                                            _this4.begin();
                                
                                            } else {
                                
                                            _this4.typewrite(_this4.strings[_this4.sequence[_this4.arrayPos]], curStrPos);
                                
                                        }
                            
                                        }
                            
                                    // humanized value for typing
                            
                                    }, humanize);
                            
                                }
                            
                                
                            
                                /**
                            
                                * Full animation is complete
                            
                                 * @private
                            
                                 */
                            
                                 }, {
                                
                                key: 'complete',
                                
                                    value: function complete() {
                                
                                        this.options.onComplete(this);
                                
                                      if (this.loop) {
                                
                                        this.curLoop++;
                                
                                        } else {
                                
                                        this.typingComplete = true;
                                
                                    }
                            
                                    }
                            
                                
                            
                                /**
                            
                                * Has the typing been stopped
                            
                                 * @param {string} curString the current string in the strings array
                            
                                 * @param {number} curStrPos the current position in the curString
                            
                                 * @param {boolean} isTyping
                            
                                 * @private
                            
                                 */
                            
                                 }, {
                                
                                key: 'setPauseStatus',
                                
                                    value: function setPauseStatus(curString, curStrPos, isTyping) {
                                
                                        this.pause.typewrite = isTyping;
                                
                                      this.pause.curString = curString;
                                
                                      this.pause.curStrPos = curStrPos;
                                
                                    }
                            
                                    
                            
                                    /**
                            
                                * Toggle the blinking cursor
                            
                                 * @param {boolean} isBlinking
                            
                                 * @private
                            
                                 */
                            
                                 }, {
                                
                                key: 'toggleBlinking',
                                
                                    value: function toggleBlinking(isBlinking) {
                                
                                        if (!this.cursor) return;
                                
                                      // if in paused state, don't toggle blinking a 2nd time
                                
                                      if (this.pause.status) return;
                                
                                      if (this.cursorBlinking === isBlinking) return;
                                
                                      this.cursorBlinking = isBlinking;
                                
                                      if (isBlinking) {
                                
                                        this.cursor.classList.add('typed-cursor--blink');
                                
                                        } else {
                                
                                        this.cursor.classList.remove('typed-cursor--blink');
                                
                                    }
                            
                                    }
                            
                                
                            
                                /**
                            
                                * Speed in MS to type
                            
                                 * @param {number} speed
                            
                                 * @private
                            
                                 */
                            
                                 }, {
                                
                                key: 'humanizer',
                                
                                    value: function humanizer(speed) {
                                
                                        return Math.round(Math.random() * speed / 2) + speed;
                                
                                    }
                            
                                    
                            
                                    /**
                            
                                * Shuffle the sequence of the strings array
                            
                                 * @private
                            
                                 */
                            
                                 }, {
                                
                                key: 'shuffleStringsIfNeeded',
                                
                                    value: function shuffleStringsIfNeeded() {
                                
                                        if (!this.shuffle) return;
                                
                                      this.sequence = this.sequence.sort(function () {
                                
                                        return Math.random() - 0.5;
                                
                                        });
                            
                                    }
                            
                                
                            
                                /**
                            
                                * Adds a CSS class to fade out current string
                            
                                 * @private
                            
                                 */
                            
                                 }, {
                                
                                key: 'initFadeOut',
                                
                                    value: function initFadeOut() {
                                
                                        var _this5 = this;
                                
                                      
                                
                                      this.el.className += ' ' + this.fadeOutClass;
                                
                                      if (this.cursor) this.cursor.className += ' ' + this.fadeOutClass;
                                
                                      return setTimeout(function () {
                                
                                        _this5.arrayPos++;
                                
                                        _this5.replaceText('');
                                
                                        
                                
                                        // Resets current string if end of loop reached
                                
                                        if (_this5.strings.length > _this5.arrayPos) {
                                
                                            _this5.typewrite(_this5.strings[_this5.sequence[_this5.arrayPos]], 0);
                                
                                          } else {
                                
                                            _this5.typewrite(_this5.strings[0], 0);
                                
                                          _this5.arrayPos = 0;
                                
                                        }
                            
                                        }, this.fadeOutDelay);
                            
                                }
                            
                                
                            
                                /**
                            
                                * Replaces current text in the HTML element
                            
                                 * depending on element type
                            
                                 * @param {string} str
                            
                                 * @private
                            
                                 */
                            
                                 }, {
                                
                                key: 'replaceText',
                                
                                    value: function replaceText(str) {
                                
                                        if (this.attr) {
                                
                                        this.el.setAttribute(this.attr, str);
                                
                                        } else {
                                
                                        if (this.isInput) {
                                
                                            this.el.value = str;
                                
                                          } else if (this.contentType === 'html') {
                                
                                            this.el.innerHTML = str;
                                
                                          } else {
                                
                                            this.el.textContent = str;
                                
                                        }
                            
                                    }
                            
                                }
                            
                                
                            
                                /**
                            
                                * If using input elements, bind focus in order to
                            
                                 * start and stop the animation
                            
                                 * @private
                            
                                 */
                            
                                 }, {
                                
                                key: 'bindFocusEvents',
                                
                                    value: function bindFocusEvents() {
                                
                                        var _this6 = this;
                                
                                      
                                
                                      if (!this.isInput) return;
                                
                                      this.el.addEventListener('focus', function (e) {
                                
                                        _this6.stop();
                                
                                        });
                            
                                      this.el.addEventListener('blur', function (e) {
                                
                                    if (_this6.el.value && _this6.el.value.length !== 0) {
                                
                                            return;
                                
                                        }
                            
                                        _this6.start();
                            
                                    });
                            
                                }
                            
                                
                            
                                /**
                            
                                * On init, insert the cursor element
                            
                                 * @private
                            
                                 */
                            
                                 }, {
                                
                                key: 'insertCursor',
                                
                                    value: function insertCursor() {
                                
                                        if (!this.showCursor) return;
                                
                                      if (this.cursor) return;
                                
                                      this.cursor = document.createElement('span');
                                
                                      this.cursor.className = 'typed-cursor';
                                
                                      this.cursor.setAttribute('aria-hidden', true);
                                
                                      this.cursor.innerHTML = this.cursorChar;
                                
                                      this.el.parentNode && this.el.parentNode.insertBefore(this.cursor, this.el.nextSibling);
                                
                                    }
                            
                                    }]);
                            
                              
                            
                              return Typed;
                            
                              })();
                            
                            
                            
                            exports['default'] = Typed;
                            
                            module.exports = exports['default'];
                            /***/ }),
                            /* 1 */
                            /***/ (function(module, exports, __webpack_require__) {
                                
                                'use strict';
                                
                                
                                
                                Object.defineProperty(exports, '__esModule', {
                                
                                    value: true
                                
                                  });
                            
                                
                            
                                var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
                            
                            
                            
                            var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();
                            
                            
                            
                            function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
                            
                            
                            
                            function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
                            
                            
                            
                            var _defaultsJs = __webpack_require__(2);
                            
                            
                            
                            var _defaultsJs2 = _interopRequireDefault(_defaultsJs);
                            
                            
                            
                            /**
                            
                            * Initialize the Typed object
                            
                             */
                            
                             
                            
                             var Initializer = (function () {
                                
                                function Initializer() {
                                
                                    _classCallCheck(this, Initializer);
                                
                                }
                            
                                  
                            
                                  _createClass(Initializer, [{
                                
                                key: 'load',
                                
                                    
                                
                                    /**
                                
                                    * Load up defaults & options on the Typed instance
                                
                                     * @param {Typed} self instance of Typed
                                
                                     * @param {object} options options object
                                
                                     * @param {string} elementId HTML element ID _OR_ instance of HTML element
                                
                                     * @private
                                
                                     */
                                
                                     
                                
                                     value: function load(self, options, elementId) {
                                
                                        // chosen element to manipulate text
                                
                                      if (typeof elementId === 'string') {
                                
                                        self.el = document.querySelector(elementId);
                                
                                        } else {
                                
                                        self.el = elementId;
                                
                                    }
                                
                                      
                                
                                      self.options = _extends({}, _defaultsJs2['default'], options);
                            
                                      
                            
                                      // attribute to type into
                            
                                  self.isInput = self.el.tagName.toLowerCase() === 'input';
                            
                                  self.attr = self.options.attr;
                            
                                  self.bindInputFocusEvents = self.options.bindInputFocusEvents;
                            
                                  
                            
                                  // show cursor
                            
                                  self.showCursor = self.isInput ? false : self.options.showCursor;
                            
                                  
                            
                                  // custom cursor
                            
                                  self.cursorChar = self.options.cursorChar;
                            
                                  
                            
                                  // Is the cursor blinking
                            
                                  self.cursorBlinking = true;
                            
                                  
                            
                                  // text content of element
                            
                                  self.elContent = self.attr ? self.el.getAttribute(self.attr) : self.el.textContent;
                            
                                  
                            
                                  // html or plain text
                            
                                  self.contentType = self.options.contentType;
                            
                                  
                            
                                  // typing speed
                            
                                  self.typeSpeed = self.options.typeSpeed;
                            
                                  
                            
                                  // add a delay before typing starts
                            
                                  self.startDelay = self.options.startDelay;
                            
                                  
                            
                                  // backspacing speed
                            
                                  self.backSpeed = self.options.backSpeed;
                            
                                  
                            
                                  // only backspace what doesn't match the previous string
                            
                                  self.smartBackspace = self.options.smartBackspace;
                            
                                  
                            
                                  // amount of time to wait before backspacing
                            
                                  self.backDelay = self.options.backDelay;
                            
                                  
                            
                                  // Fade out instead of backspace
                            
                                  self.fadeOut = self.options.fadeOut;
                            
                                  self.fadeOutClass = self.options.fadeOutClass;
                            
                                  self.fadeOutDelay = self.options.fadeOutDelay;
                            
                                  
                            
                                  // variable to check whether typing is currently paused
                            
                                  self.isPaused = false;
                            
                                  
                            
                                  // input strings of text
                            
                                  self.strings = self.options.strings.map(function (s) {
                                
                                    return s.trim();
                                
                                        });
                            
                                      
                            
                                      // div containing strings
                            
                                  if (typeof self.options.stringsElement === 'string') {
                                
                                    self.stringsElement = document.querySelector(self.options.stringsElement);
                                
                                        } else {
                                
                                        self.stringsElement = self.options.stringsElement;
                                
                                    }
                            
                                      
                            
                                      if (self.stringsElement) {
                                
                                    self.strings = [];
                                
                                        self.stringsElement.style.display = 'none';
                                
                                        var strings = Array.prototype.slice.apply(self.stringsElement.children);
                                
                                        var stringsLength = strings.length;
                                
                                        
                                
                                        if (stringsLength) {
                                
                                            for (var i = 0; i < stringsLength; i += 1) {
                                
                                            var stringEl = strings[i];
                                
                                            self.strings.push(stringEl.innerHTML.trim());
                                
                                        }
                            
                                        }
                            
                                }
                            
                                  
                            
                                  // character number position of current string
                            
                                  self.strPos = 0;
                            
                                  
                            
                                  // current array position
                            
                                  self.arrayPos = 0;
                            
                                  
                            
                                  // index of string to stop backspacing on
                            
                                  self.stopNum = 0;
                            
                                  
                            
                                  // Looping logic
                            
                                  self.loop = self.options.loop;
                            
                                  self.loopCount = self.options.loopCount;
                            
                                  self.curLoop = 0;
                            
                                  
                            
                                  // shuffle the strings
                            
                                  self.shuffle = self.options.shuffle;
                            
                                  // the order of strings
                            
                                  self.sequence = [];
                            
                                  
                            
                                  self.pause = {
                                
                                    status: false,
                                
                                        typewrite: true,
                                
                                        curString: '',
                                
                                        curStrPos: 0
                                
                                        };
                            
                                      
                            
                                      // When the typing is complete (when not looped)
                            
                                  self.typingComplete = false;
                            
                                  
                            
                                  // Set the order in which the strings are typed
                            
                                  for (var i in self.strings) {
                                
                                    self.sequence[i] = i;
                                
                                    }
                            
                                      
                            
                                      // If there is some text in the element
                            
                                  self.currentElContent = this.getCurrentElContent(self);
                            
                                  
                            
                                  self.autoInsertCss = self.options.autoInsertCss;
                            
                                  
                            
                                  this.appendAnimationCss(self);
                            
                                }
                            
                                }, {
                                
                                key: 'getCurrentElContent',
                                
                                    value: function getCurrentElContent(self) {
                                
                                        var elContent = '';
                                
                                      if (self.attr) {
                                
                                        elContent = self.el.getAttribute(self.attr);
                                
                                        } else if (self.isInput) {
                                
                                        elContent = self.el.value;
                                
                                        } else if (self.contentType === 'html') {
                                
                                        elContent = self.el.innerHTML;
                                
                                        } else {
                                
                                        elContent = self.el.textContent;
                                
                                    }
                            
                                      return elContent;
                            
                                }
                            
                                }, {
                                
                                key: 'appendAnimationCss',
                                
                                    value: function appendAnimationCss(self) {
                                
                                        var cssDataName = 'data-typed-js-css';
                                
                                      if (!self.autoInsertCss) {
                                
                                        return;
                                
                                    }
                            
                                      if (!self.showCursor && !self.fadeOut) {
                                
                                    return;
                                
                                    }
                            
                                      if (document.querySelector('[' + cssDataName + ']')) {
                                
                                    return;
                                
                                    }
                            
                                      
                            
                                      var css = document.createElement('style');
                            
                                  css.type = 'text/css';
                            
                                  css.setAttribute(cssDataName, true);
                            
                                  
                            
                                  var innerCss = '';
                            
                                  if (self.showCursor) {
                                
                                    innerCss += '\
                                        .typed-cursor{\
                                          opacity: 1;\
                                        }\
                                    .typed-cursor.typed-cursor--blink{\
                                          animation: typedjsBlink 0.7s infinite;\
                                          -webkit-animation: typedjsBlink 0.7s infinite;\
                                                  animation: typedjsBlink 0.7s infinite;\
                                        }\
                                    @keyframes typedjsBlink{\
                                          50% { opacity: 0.0; }\
                                    }\
                                    @-webkit-keyframes typedjsBlink{\
                                          0% { opacity: 1; }\
                                      50% { opacity: 0.0; }\
                                      100% { opacity: 1; }\
                                    }\
                                  ';
                            
                                }
                            
                                  if (self.fadeOut) {
                                
                                    innerCss += '\
                                        .typed-fade-out{\
                                          opacity: 0;\
                                          transition: opacity .25s;\
                                        }\
                                    .typed-cursor.typed-cursor--blink.typed-fade-out{\
                                          -webkit-animation: 0;\
                                          animation: 0;\
                                        }\
                                  ';
                            
                                }
                            
                                  if (css.length === 0) {
                                
                                    return;
                                
                                    }
                            
                                      css.innerHTML = innerCss;
                            
                                  document.body.appendChild(css);
                            
                                }
                            
                                }]);
                            
                              
                            
                              return Initializer;
                            
                              })();
                            
                            
                            
                            exports['default'] = Initializer;
                            
                            var initializer = new Initializer();
                            
                            exports.initializer = initializer;
                            /***/ }),
                            /* 2 */
                            /***/ (function(module, exports) {
                                
                                /**
                                
                                * Defaults & options
                                
                                 * @returns {object} Typed defaults & options
                            
                                 * @public
                            
                             */
                            
                             
                            
                             'use strict';
                            
                            
                            
                            Object.defineProperty(exports, '__esModule', {
                                
                                value: true
                                
                                  });
                            
                                var defaults = {
                                
                                /**
                                
                                  * @property {array} strings strings to be typed
                            
                                   * @property {string} stringsElement ID of element containing string children
                            
                               */
                            
                               strings: ['These are the default values...', 'You know what you should do?', 'Use your own!', 'Have a great day!'],
                            
                              stringsElement: null,
                            
                              
                            
                              /**
                            
                              * @property {number} typeSpeed type speed in milliseconds
                            
                               */
                            
                               typeSpeed: 0,
                            
                              
                            
                              /**
                            
                              * @property {number} startDelay time before typing starts in milliseconds
                            
                               */
                            
                               startDelay: 0,
                            /**
                            * @property {number} backSpeed backspacing speed in milliseconds
                            */
                            backSpeed: 0,
                            /**
                            * @property {boolean} smartBackspace only backspace what doesn't match the previous string
                            */
                            smartBackspace: true,                            
                            /**
                            * @property {boolean} shuffle shuffle the strings
                            */
                            shuffle: false,
                            /**
                            * @property {number} backDelay time before backspacing in milliseconds
                            */
                            backDelay: 700,
/**
* @property {boolean} fadeOut Fade out instead of backspace
* @property {string} fadeOutClass css class for fade animation
* @property {boolean} fadeOutDelay Fade out delay in milliseconds
*/
                            fadeOut: false,
                            fadeOutClass: 'typed-fade-out',
                            fadeOutDelay: 500,
                            /**
                            * @property {boolean} loop loop strings
                            * @property {number} loopCount amount of loops
                            */
                            loop: false,
                            loopCount: Infinity,
/**
* @property {boolean} showCursor show cursor
* @property {string} cursorChar character for cursor
* @property {boolean} autoInsertCss insert CSS for cursor and fadeOut into HTML <head>
*/
                            showCursor: true,
                            cursorChar: '|',
                            autoInsertCss: true,
/**
* @property {string} attr attribute for typing
* Ex: input placeholder, value, or just HTML text
*/
                            attr: null,
/**
* @property {boolean} bindInputFocusEvents bind to focus and blur if el is text input
*/
                            bindInputFocusEvents: false,
/**
* @property {string} contentType 'html' or 'null' for plaintext
*/
                            contentType: 'html',
/**
* Before it begins typing
* @param {Typed} self
*/
                            onBegin: function onBegin(self) {},
/**
* All typing is complete
* @param {Typed} self
*/
                            onComplete: function onComplete(self) {},
/**
* Before each string is typed
* @param {number} arrayPos
* @param {Typed} self
*/
                            preStringTyped: function preStringTyped(arrayPos, self) {},
/**
* After each string is typed
* @param {number} arrayPos
* @param {Typed} self
*/
                            onStringTyped: function onStringTyped(arrayPos, self) {},
/**
* During looping, after last string is typed
* @param {Typed} self
*/
                            onLastStringBackspaced: function onLastStringBackspaced(self) {},
/**
* Typing has been stopped
* @param {number} arrayPos
* @param {Typed} self
*/
                            onTypingPaused: function onTypingPaused(arrayPos, self) {},
/**
* Typing has been started after being stopped
* @param {number} arrayPos
* @param {Typed} self
*/
                            onTypingResumed: function onTypingResumed(arrayPos, self) {},
/**
* After reset
* @param {Typed} self
*/
                            onReset: function onReset(self) {},
/**        
* After stop    
* @param {number} arrayPos
* @param {Typed} self
*/
                            
                               onStop: function onStop(arrayPos, self) {},
/**
* After start
* @param {number} arrayPos
* @param {Typed} self
*/
                               onStart: function onStart(arrayPos, self) {},
/**
* After destroy
* @param {Typed} self
*/
                               onDestroy: function onDestroy(self) {}
                            
                              };
                            
                            
                            
                            exports['default'] = defaults;
                            
                            module.exports = exports['default'];
                            /***/ }),
                            /* 3 */
                            /***/ 
                            (function(module, exports) {
/**
* TODO: These methods can probably be combined somehow
* Parse HTML tags & HTML Characters
*/
                                 'use strict';
                                Object.defineProperty(exports, '__esModule', {
                                    value: true
                                  });
                                var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();
                            function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
                            var HTMLParser = (function () {
                                function HTMLParser() {
                                    _classCallCheck(this, HTMLParser);
                                }
                                _createClass(HTMLParser, [{
                                key: 'typeHtmlChars',
/**
* Type HTML tags & HTML Characters
* @param {string} curString Current string
* @param {number} curStrPos Position in current string
* @param {Typed} self instance of Typed
* @returns {number} a new string position
* @private
*/
                                     value: function typeHtmlChars(curString, curStrPos, self) {
                                
                                        if (self.contentType !== 'html') return curStrPos;
                                
                                      var curChar = curString.substr(curStrPos).charAt(0);
                                
                                      if (curChar === '<' || curChar === '&') {
                                
                                        var endTag = '';
                                
                                        if (curChar === '<') {
                                            endTag = '>';
                                          } else {
                                            endTag = ';';
                                        }
                                        while (curString.substr(curStrPos + 1).charAt(0) !== endTag) {
                                            curStrPos++;
                                          if (curStrPos + 1 > curString.length) {
                                            break;
                                        }
                                        }
                                        curStrPos++;
                                    }
                                      return curStrPos;
                                    }
/**
* Backspace HTML tags and HTML Characters
* @param {string} curString Current string
* @param {number} curStrPos Position in current string
* @param {Typed} self instance of Typed
* @returns {number} a new string position
* @private
*/
                                     }, {
                                
                                    key: 'backSpaceHtmlChars',
                                
                                    value: function backSpaceHtmlChars(curString, curStrPos, self) {
                                
                                        if (self.contentType !== 'html') return curStrPos;
                                
                                      var curChar = curString.substr(curStrPos).charAt(0);
                                
                                      if (curChar === '>' || curChar === ';') {
                                
                                        var endTag = '';
                                
                                        if (curChar === '>') {
                                
                                            endTag = '<';
                                
                                          } else {
                                
                                            endTag = '&';
                                
                                        }
                                
                                        while (curString.substr(curStrPos - 1).charAt(0) !== endTag) {
                                
                                            curStrPos--;
                                
                                          if (curStrPos < 0) {
                                
                                            break;
                                
                                        }
                                
                                        }
                                
                                        curStrPos--;
                                
                                    }
                                
                                      return curStrPos;
                                
                                    }
                                
                                    }]);
                                  
                                  return HTMLParser;
                              })();
                            exports['default'] = HTMLParser;
                            var htmlParser = new HTMLParser();
                            exports.htmlParser = htmlParser;
                            })])
                                       ;"
            ]